#!/usr/bin/env node
fs = require('fs');

var debug = false;

if(process.argv.length < 4)
{
	console.log('Usage: csv-to-json-table <CSV> <OUTPUT>.table.json');
	return;
}

function warn(msg)
{
	console.log('[Warning]: ' + msg);
}

function csv_to_arrays(data, delim)
{
	delim = (delim || ",");

	// Create a regular expression to parse the CSV values.
	var objPattern = new RegExp(
		(
			"(\\" + delim + "|\\r?\\n|\\r|^)" + // Delimiters.
			"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + // Quoted fields.
			"([^\"\\" + delim + "\\r\\n]*))" // Standard fields.
		),
		"gi"
	);


	var streams = [[]];
	var matches = null;


	while(matches = objPattern.exec(data))
	{
		var delim_match = matches[1];
		var m = null;
		
		// Check to see if the given delimiter has a length
		// (is not the start of string) and if it matches
		// field delimiter. If id does not, then we know
		// that this delimiter is a row delimiter.
		if(delim_match.length && (delim_match != delim))
			streams.push([]);

		if(matches[2]) // Quoted?
			m = matches[2].replace(new RegExp( "\"\"", "g" ), "\""); // Unescape.
		else
			m = matches[3];


		streams[streams.length-1].push(m);
	}

	return streams;
}
    
function objectify(arrays)
{
	var streams = [];
	
	if(arrays.length > 0)
	{
		var ids = arrays[0];
		
		for(var i = 0, len = ids.length; i < len; i++)
			streams.push({ id: ids[i], data: [] });
			
		for(var i = 1, len = arrays.length; i < len; i++)
		{
			var row = arrays[i];
			
			for(var s = 0, slen = Math.min(streams.length, row.length); s < slen; s++)
				streams[s].data.push(row[s]);
		}
		
	}
	
	return streams;
}

var obj = objectify(csv_to_arrays(fs.readFileSync(process.argv[2], 'utf8')));

fs.writeFileSync(process.argv[3] + '.table.json', JSON.stringify(obj, ' ', 4));
