{
    "abs_t": 22.101,
    "active_graph": 1,
    "graph_uid": 3,
    "root": {
        "node_uid": 1,
        "uid": 0,
        "parent_uid": -1,
        "nodes": [
            {
                "plugin": "graph",
                "x": 470,
                "y": 310,
                "uid": 0,
                "state": {
                    "enabled": true,
                    "input_sids": {},
                    "output_sids": {}
                },
                "title": "glsl effect",
                "graph": {
                    "node_uid": 19,
                    "uid": 1,
                    "parent_uid": 0,
                    "nodes": [
                        {
                            "plugin": "mesh_renderer_emitter",
                            "x": 728,
                            "y": 290,
                            "uid": 0
                        },
                        {
                            "plugin": "quad_mesh_generator",
                            "x": 478,
                            "y": 235,
                            "uid": 1
                        },
                        {
                            "plugin": "from_mesh_custom_shader",
                            "x": 569,
                            "y": 334,
                            "uid": 2,
                            "dsid": 7,
                            "state": {
                                "vs_src": "void main(void) {\n    gl_Position = p_mat * v_mat * m_mat * vec4(v_pos, 1.0);\n   f_norm = normalize(n_mat * v_norm);\n    f_uv0 = v_uv0;\n    f_col = d_col;\n}",
                                "ps_src": "// Ray Marching (Sphere Tracing) experiment by Riccardo Gerosa aka h3r3 \n// Blog: http://www.postronic.org/h3/ G+: https://plus.google.com/u/0/117369239966730363327 Twitter: http://twitter.com/#!/h3r3\n// This GLSL shader is based on the awesome work of JC Hart and I Quilez. Features two lights with soft shadows, blobby objects, object space ambient occlusion.\n\nconst float PI = 3.14159265358979;\nconst int MAX_RAYMARCH_ITER = 50;\nconst float MIN_RAYMARCH_DELTA = 0.01;\nconst float GRADIENT_DELTA = 0.006;\nconst float SOFT_SHADOWS_FACTOR = 3.0;\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat sdPlane(vec3 p, vec4 n) { // n must be normalized\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat blend(float d1, float d2) {\n    float dd = cos((d1 - d2) * PI);\n    return mix(d1, d2, dd);\n}\n\nfloat map(vec3 p, vec3 ray_dir) { //  ray_dir is used only for some optimizations\n    float plane = sdPlane(p + vec3(0,0.3,0), vec4(normalize(vec3(0, 1, -0.5)),0));\n    if (ray_dir.z <= 0.0 || p.z < 1.0) { // Optimization: try not to compute blobby object distance when possible\n        float sphere1 = sdSphere(p + vec3(cos(time * 0.2 + PI) * 0.45,0,0), 0.25);\n        float sphere2 = sdSphere(p + vec3(cos(time * 0.2) * 0.45,0,0), 0.25);\n        float torus = sdTorus(vec3(p.y + sin(time) *0.1, p.z + cos(time) * 0.1, p.x), vec2(0.2, 0.08));\n        return min(min(blend(sphere1, torus), blend(sphere2, torus)), plane);\n    } else {\n        return plane;\n    }\n}\n\nfloat map(vec3 p) {\n    return map(p, vec3(0,0,0));\n}\n\nvec3 gradientNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(GRADIENT_DELTA, 0, 0)) - map(p - vec3(GRADIENT_DELTA, 0, 0)),\n        map(p + vec3(0, GRADIENT_DELTA, 0)) - map(p - vec3(0, GRADIENT_DELTA, 0)),\n        map(p + vec3(0, 0, GRADIENT_DELTA)) - map(p - vec3(0, 0, GRADIENT_DELTA))));\n}\n\nbool raymarch(vec3 ray_start, vec3 ray_dir, out float dist, out vec3 p, out int iterations) {\n    dist = 0.0;\n    float minStep = 0.0001;\n    for (int i = 1; i <= MAX_RAYMARCH_ITER; i++) {\n        p = ray_start + ray_dir * dist;\n        float mapDist = map(p, ray_dir);\n        if (mapDist < MIN_RAYMARCH_DELTA) {\n           iterations = i;\n           return true;\n        }\n        if(mapDist < minStep) { mapDist = minStep; }\n        dist += mapDist;\n        float ifloat = float(i);\n        minStep += 0.0000018 * ifloat * ifloat;\n    }\n    return false;\n}\n\nbool raymarch_to_light(vec3 ray_start, vec3 ray_dir, float maxDist, out float dist, out vec3 p, out int iterations, out float light_intensity) {\n    dist = 0.0;\n    float minStep = 0.0001;\n    light_intensity = 1.0;\n    for (int i = 1; i <= MAX_RAYMARCH_ITER; i++) {\n        p = ray_start + ray_dir * dist;\n        float mapDist = map(p, ray_dir);\n        if (mapDist < MIN_RAYMARCH_DELTA) {\n            iterations = i;\n            return true;\n        }\n        light_intensity = min(light_intensity, SOFT_SHADOWS_FACTOR * mapDist / dist);\n        if(mapDist < minStep) { mapDist = minStep; }\n        dist += mapDist;\n        if (dist >= maxDist) { break; }\n        float ifloat = float(i);\n        minStep += 0.0000018 * ifloat * ifloat;\n    }\n    return false;\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n) {\n    float step = 0.03;\n    float ao = 0.0;\n    float dist;\n    for (int i = 1; i <= 3; i++) {\n        dist = step * float(i);\n        ao += (dist - map(p + n * dist)) / float(i * i);\n    }\n    return ao;\n}\n\nvoid main( void ) {\n    vec2 position = vec2((gl_FragCoord.x - resolution.x / 2.0) / resolution.y, (gl_FragCoord.y - resolution.y / 2.0) / resolution.y);\n    vec3 ray_start = vec3(0, 0, -2);\n    vec3 ray_dir = normalize(vec3(position,0) - ray_start);\n\n    float angleX = (mouse.y -0.5) * 0.5;\n    float angleY = (mouse.x -0.5);\n    float angleZ = (mouse.x -0.5) * 0.1;\n    mat3 rotateX = mat3(1.0, 0.0, 0.0,\n                        0.0, cos(angleX), -sin(angleX),\n                        0.0, sin(angleX), cos(angleX));\n    mat3 rotateY = mat3(cos(angleY), 0.0, sin(angleY),\n                        0.0, 1.0, 0.0,\n                        -sin(angleY), 0.0, cos(angleY));\n    mat3 rotateZ = mat3(cos(angleZ), -sin(angleZ), 0.0,\n                        sin(angleZ), cos(angleZ), 0.0,\n                        0.0, 0.0, 1.0);\n    ray_dir = ray_dir * rotateX * rotateY * rotateZ;\n    ray_start.x = -mouse.x * 3.0 + 1.5;\n    ray_start.y = mouse.y * 1.0 - 0.5;\n\n    vec3 light1_pos = vec3(-0.5 + sin(time), 1.0, -1.0 + cos(time * 0.5) * 2.0);\n    vec3 light2_pos = vec3(sin(time * 1.9 + 2.0) * 0.6, sin(time * 1.8) + 5.0, -0.5 + sin(time * 1.6) * 0.5);\n    vec4 color;\n    float dist; vec3 p; int iterations;\n    if (raymarch(ray_start, ray_dir, dist, p, iterations)) {\n        float d2; vec3 p2; int i2; float light_intensity;\n\n        vec3 light1_dir = light1_pos - p;\n        float light1_dist = length(light1_dir);\n        light1_dir = normalize(light1_dir);\n\n        vec3 light2_dir = light2_pos - p;\n        float light2_dist = length(light2_dir);\n        light2_dir = normalize(light2_dir);\n\n        vec3 n = gradientNormal(p);\n        float ambient = (0.16 - ambientOcclusion(p, n)) / (dist * dist * 0.17);\n        vec3 diffuse1 = vec3(0,0,0);\n        if (!raymarch_to_light(p + light1_dir * 0.1, light1_dir, light1_dist, d2, p2, i2, light_intensity)) {\n            diffuse1 = vec3(1.0, 0.8, 0.6) * max(0.0, dot(normalize(light1_pos - p), n) * light_intensity * 3.0 / (dist * dist));\n        }\n        vec3 diffuse2 = vec3(0,0,0);\n        if (!raymarch_to_light(p + light2_dir * 0.1, light2_dir, light2_dist, d2, p2, i2, light_intensity)) {\n            diffuse2 = vec3(0.6, 0.8, 1.0) * max(0.0, dot(normalize(light2_pos - p), n) * light_intensity * 3.0 / (dist * dist));\n        }\n        color = vec4(vec3(0.9,0.8,0.6) * max(diffuse1 + diffuse2, ambient), 1);\n    } else {\n        color = vec4(0,0,0,0);\n    }\n    gl_FragColor = color;\n}",
                                "changed": true,
                                "slot_ids": {
                                    "time": {
                                        "id": 0,
                                        "dt": {
                                            "id": 0,
                                            "name": "Float"
                                        },
                                        "uniform": {}
                                    },
                                    "resolution": {
                                        "id": 1,
                                        "dt": {
                                            "id": 5,
                                            "name": "Vector"
                                        },
                                        "uniform": {}
                                    },
                                    "mouse": {
                                        "id": 6,
                                        "dt": {
                                            "id": 5,
                                            "name": "Vector"
                                        },
                                        "uniform": {}
                                    }
                                }
                            },
                            "dyn_in": [
                                {
                                    "name": "time",
                                    "dt": 0,
                                    "uid": 0,
                                    "index": 0,
                                    "type": 0,
                                    "is_connected": true
                                },
                                {
                                    "name": "resolution",
                                    "dt": 5,
                                    "uid": 1,
                                    "index": 1,
                                    "type": 0,
                                    "is_connected": true
                                },
                                {
                                    "name": "mouse",
                                    "dt": 5,
                                    "uid": 6,
                                    "index": 2,
                                    "type": 0,
                                    "is_connected": true
                                }
                            ]
                        },
                        {
                            "plugin": "vector",
                            "x": 436,
                            "y": 467,
                            "uid": 3
                        },
                        {
                            "plugin": "const_float_generator",
                            "x": 223,
                            "y": 484,
                            "uid": 4,
                            "state": {
                                "val": 480
                            }
                        },
                        {
                            "plugin": "const_float_generator",
                            "x": 255,
                            "y": 561,
                            "uid": 5,
                            "state": {
                                "val": 270
                            }
                        },
                        {
                            "plugin": "graph",
                            "x": 375,
                            "y": 278,
                            "uid": 6,
                            "dsid": 2,
                            "state": {
                                "enabled": true,
                                "input_sids": {
                                    "7": 1
                                },
                                "output_sids": {
                                    "6": 0
                                }
                            },
                            "title": "Time",
                            "graph": {
                                "node_uid": 8,
                                "uid": 2,
                                "parent_uid": 1,
                                "nodes": [
                                    {
                                        "plugin": "delta_t_generator",
                                        "x": 7,
                                        "y": 7,
                                        "uid": 0
                                    },
                                    {
                                        "plugin": "accumulate_modulator",
                                        "x": 181,
                                        "y": 7,
                                        "uid": 1,
                                        "state": {
                                            "value": 152.6929999999988
                                        }
                                    },
                                    {
                                        "plugin": "multiply_modulator",
                                        "x": 101,
                                        "y": 7,
                                        "uid": 2
                                    },
                                    {
                                        "plugin": "output_proxy",
                                        "x": 283,
                                        "y": 7,
                                        "uid": 6,
                                        "dsid": 12,
                                        "state": {
                                            "slot_id": 0
                                        },
                                        "title": "time",
                                        "dyn_in": [
                                            {
                                                "name": "input",
                                                "dt": 0,
                                                "uid": 0,
                                                "index": 0,
                                                "type": 0,
                                                "connected": true,
                                                "is_connected": true
                                            }
                                        ]
                                    },
                                    {
                                        "plugin": "input_proxy",
                                        "x": 23,
                                        "y": 66,
                                        "uid": 7,
                                        "dsid": 10,
                                        "state": {
                                            "slot_id": 0
                                        },
                                        "title": "Speed",
                                        "dyn_out": [
                                            {
                                                "name": "output",
                                                "dt": 0,
                                                "desc": "Connect this to a slot of any type, to have the parent slot assume its datatype and forward data from the parent graph.",
                                                "uid": 0,
                                                "index": 0,
                                                "type": 1,
                                                "connected": true
                                            }
                                        ]
                                    }
                                ],
                                "conns": [
                                    {
                                        "src_nuid": 0,
                                        "dst_nuid": 2,
                                        "src_slot": 0,
                                        "dst_slot": 0
                                    },
                                    {
                                        "src_nuid": 2,
                                        "dst_nuid": 1,
                                        "src_slot": 0,
                                        "dst_slot": 0
                                    },
                                    {
                                        "src_nuid": 1,
                                        "dst_nuid": 6,
                                        "src_slot": 0,
                                        "dst_slot": 0,
                                        "dst_connected": true,
                                        "dst_dyn": true,
                                        "offset": 1
                                    },
                                    {
                                        "src_nuid": 7,
                                        "dst_nuid": 2,
                                        "src_slot": 0,
                                        "dst_slot": 1,
                                        "src_connected": true,
                                        "src_dyn": true
                                    }
                                ]
                            },
                            "dyn_in": [
                                {
                                    "name": "Speed",
                                    "dt": 0,
                                    "uid": 1,
                                    "index": 0,
                                    "type": 0,
                                    "is_connected": true
                                }
                            ],
                            "dyn_out": [
                                {
                                    "name": "time",
                                    "dt": 0,
                                    "uid": 0,
                                    "index": 0,
                                    "type": 1
                                }
                            ]
                        },
                        {
                            "plugin": "slider_float_generator",
                            "x": 173,
                            "y": 298,
                            "uid": 7,
                            "state": {
                                "val": 1,
                                "min": 0,
                                "max": 1
                            },
                            "title": "Speed"
                        },
                        {
                            "plugin": "clock_generator",
                            "x": 302,
                            "y": 415,
                            "uid": 8
                        },
                        {
                            "plugin": "annotation",
                            "x": 402,
                            "y": 581,
                            "uid": 15,
                            "state": {
                                "text": "HOWTO paste things from Heroku GLSL Gallery.\nhttp://glsl.heroku.com/\n\nthe vertex shader currently in engi should work for all those heroku examples.\n\nat the top of all the heroku examples you notice that the same three uniforms (what equates to our dynamic slots, i.e. inputs to the shader supplied by the program using them): \n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nthose three arguments are always supplied to the heroku shaders: the current absolute time (our clock plugin), the mouse position (mouse pos plugin, but is only used by some heroku shaders) and finally framebuffer resolution (used by a significant proportion of those shaders for raymarching, but not all)\n\nso, the naive way to transplant those shaders are to copy everything into the pixel shader editor - minus those uniform declarations and any shader compiler directives, such as:\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n---\n\nYou should also change any references to plain \"resolution\" to \"resolution.xy\".\n\n---\n\nThen you'll need to create slots for \"time\",  \"resolution\" and \"mouse\". In this example they are already created.\n\n",
                                "width": 398,
                                "height": 147
                            }
                        },
                        {
                            "plugin": "mouse_position_generator",
                            "x": 143,
                            "y": 108,
                            "uid": 17
                        },
                        {
                            "plugin": "vector",
                            "x": 276,
                            "y": 128,
                            "uid": 18
                        }
                    ],
                    "conns": [
                        {
                            "src_nuid": 1,
                            "dst_nuid": 0,
                            "src_slot": 0,
                            "dst_slot": 0
                        },
                        {
                            "src_nuid": 2,
                            "dst_nuid": 0,
                            "src_slot": 0,
                            "dst_slot": 1
                        },
                        {
                            "src_nuid": 1,
                            "dst_nuid": 2,
                            "src_slot": 0,
                            "dst_slot": 0,
                            "offset": 1
                        },
                        {
                            "src_nuid": 3,
                            "dst_nuid": 2,
                            "src_slot": 0,
                            "dst_slot": 1,
                            "dst_dyn": true
                        },
                        {
                            "src_nuid": 6,
                            "dst_nuid": 2,
                            "src_slot": 0,
                            "dst_slot": 0,
                            "src_dyn": true,
                            "dst_dyn": true
                        },
                        {
                            "src_nuid": 4,
                            "dst_nuid": 3,
                            "src_slot": 0,
                            "dst_slot": 0
                        },
                        {
                            "src_nuid": 5,
                            "dst_nuid": 3,
                            "src_slot": 0,
                            "dst_slot": 1
                        },
                        {
                            "src_nuid": 7,
                            "dst_nuid": 6,
                            "src_slot": 0,
                            "dst_slot": 0,
                            "dst_dyn": true
                        },
                        {
                            "src_nuid": 18,
                            "dst_nuid": 2,
                            "src_slot": 0,
                            "dst_slot": 2,
                            "dst_dyn": true
                        },
                        {
                            "src_nuid": 17,
                            "dst_nuid": 18,
                            "src_slot": 0,
                            "dst_slot": 0
                        },
                        {
                            "src_nuid": 17,
                            "dst_nuid": 18,
                            "src_slot": 1,
                            "dst_slot": 1
                        }
                    ]
                }
            }
        ],
        "conns": []
    }
}
