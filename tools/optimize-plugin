#!/usr/bin/env node
var uglify = require('uglify-js2');
var fs = require('fs');
var util = require('util');

if(process.argv.length < 3)
{
	console.log('Usage: optimize-plugin <input.plugin.js>');
	return;
}

var code = fs.readFileSync(process.argv[2], 'utf8');
var ast = uglify.parse(code);

// Remove methods.
var toplevel = ast.body;
var pending = [];

for(var i = 1; i < toplevel.length; i++)
{
	var func = toplevel[i];
	var id = func.body.left.property;

	if(id === 'create_ui' || id === 'open_editor' || id === 'connection_changed')
		pending.push(func);
}

for(var i = 0; i < pending.length; i++)
	toplevel.splice(toplevel.indexOf(pending[i]), 1)

var init = toplevel[0].body.right.right.body;
var desc = null;

function remove_prop(item, id)
{
	var props = item.properties;
	
	for(var c = 0; c < props.length; c++)
	{
		if(props[c].key === id)
		{
			props.splice(c, 1);
			return;
		}
	}
}

for(var i = 0; i < init.length; i++)
{
	// Deal with local variable declarations in the initialization function scope.
	if(!init[i].body)
		continue;

	// Deal with empty input / output slot collections.
	if(!init[i].body.left)
		continue;
	
	var id = init[i].body.left.property;
	
	if(id === 'desc')
		desc = init[i];
	else if(id === 'input_slots' || id === 'output_slots')
	{
		var items = init[i].body.right.elements;
		
		for(var i2 = 0; i2 < items.length; i2++)
		{
			var item = items[i2];
			
			remove_prop(item, 'name');
			remove_prop(item, 'desc');
			remove_prop(item, 'def');
			remove_prop(item, 'lo');
			remove_prop(item, 'hi');
		}
	}
}

if(desc)
	init.splice(init.indexOf(desc), 1);

ast.figure_out_scope();

var compressor = uglify.Compressor({ 'dead_code': false, 'unused': false });
//var comp_ast = ast.transform(compressor);

console.log(ast.print_to_string({ beautify: true }));
