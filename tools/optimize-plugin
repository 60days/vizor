#!/usr/bin/env node
var jsp = require('uglify-js').parser;
var pro = require('uglify-js').uglify;
var fs = require('fs');

if(process.argv.length < 4)
{
	console.log('Usage: optimize-plugin <input.plugin.js> <output.plugin.js>');
	return;
}

var plugin_js = fs.readFileSync(process.argv[2], 'utf8');
var plugin_ast = jsp.parse(plugin_js);

// Remove methods.
var toplevel = plugin_ast[1];
var pending = [];

for(var i = 0; i < toplevel.length; i++)
{
	var e = toplevel[i];
	var id = e[1][2][2];

	if(id === 'create_ui' || id === 'open_editor' || id === 'connection_changed')
		pending.push(e);
}

for(var i = 0; i < pending.length; i++)
	toplevel.splice(toplevel.indexOf(pending[i]), 1)

// Remove inline help strings and slot data.
function remove_prop(item, id)
{
	for(var c = 0; c < item.length; c++)
	{
		if(item[c][0] === id)
		{
			item.splice(c, 1);
			return;
		}
	}
}

function prune_slots(slots)
{
	var items = slots[1][3][1];

	for(var i = 0; i < items.length; i++)
	{
		var item = items[i][1];
		
		remove_prop(item, 'name');
		remove_prop(item, 'dt');
		remove_prop(item, 'desc');
		remove_prop(item, 'def');
		remove_prop(item, 'lo');
		remove_prop(item, 'hi');
	}
}

var head = plugin_ast[1][0][1][3][3][3];
pending = [];
var util = require('util');

for(var i = 0; i < head.length; i++)
{
	if(!head[i] || head[i][1].length < 2)
		continue;
		
	var id = head[i][1][2][2];

	if(id === 'desc')
		pending.push(head[i])
	else if(id === 'input_slots')
		prune_slots(head[i]);
	else if(id === 'output_slots')
		prune_slots(head[i]);
}

for(var i = 0; i < pending.length; i++)
	head.splice(head.indexOf(pending[i]), 1);

plugin_ast = pro.ast_mangle(plugin_ast);
plugin_ast = pro.ast_squeeze(plugin_ast);
plugin_js = pro.gen_code(plugin_ast);

fs.writeFileSync(process.argv[3], plugin_js)
